#include <GL/glut.h>
#include <iostream>
#include <math.h>

using namespace std;

int ch = 0;

void display(int x, int y)
{
    glColor3f(0,0,0);
    glPointSize(2);
    glBegin(GL_POINTS);
    glVertex2i(x, y);
    glEnd();
}

void displaydotted(int x, int y)
{
    glColor3f(0,0,0);
    glPointSize(2);
    glBegin(GL_POINTS);
    glVertex2i(x, y);
    glEnd();
}

void displaydashed(int x, int y)
{
    glColor3f(0,0,0);
    glPointSize(3);
    glBegin(GL_POINTS);
    glVertex2i(x, y);
    glEnd();
}

void displaysolid(int x, int y)
{
    glColor3f(0,0,0);
    glPointSize(6);
    glBegin(GL_POINTS);
    glVertex2i(x, y);
    glEnd();
}

int Sign(int s){
	if (s > 0){
		return 1;
	}
	else if(s < 0){
		return -1;
	}
	else{
		return 0;
	}
}

void SimpleLine(int x1, int y1, int x2, int y2){
	int dx = abs(x2 - x1);
	int dy = abs(y2 - y1);
	int P;
	int x = x1;
	int y = y1;

	if(dx > dy){
		cout << "1" << endl;
		display(x, y);
		P = (2*dy) - dx;
		for(int i = 0; i < dx; i++)
        {
            if(P < 0){
                P = P + (2*dy);
				x = x + 1;
			}
            else
            {
                P = P + (2*dy) - (2*dx);
				y = y + 1;
				x = x + 1;
            }
            display(x,y);
			cout << x << " " << y << endl;
		}
	}
	else{
		cout << "2" << endl;
		display(x, y);
		P = (2*dx) - dy;
		for(int i = 0; i < dy; i++)
        {
            if(P < 0){
                P = P + (2*dx);
				y = y + 1;
			}
            else
            {
                P = P + (2*dx) - (2*dy);
                x = x + 1;
				y = y + 1;
            }
            display(x,y);
			cout << x << " " << y << endl;
		}
	}
	glFlush();
}

void DottedLine(int x1, int y1, int x2, int y2){
	int dx = x2 - x1;
	int dy = y2 - y1;
	int m = dy/dx;
	if (m < 1){
		int P = (2*dy) - dx;
		int x = x1;
		int y = y1;
		if (dx < 0)
		{
			x = x2;
			y = y2;
			x2 = x1;
		}
		display(x, y);
		while (x < x2)
		{
			if (P >= 0)
			{
				x = x+1;
				y = y+1;
				P = P + (2*dy) - (2*dx) * (y+1 - y);
			}
			else
			{
				x = x+1;
				y = y;
				P = P + (2*dy) - (2*dx) * (y - y);
			}
			display(x, y);
		}
	}
	else if (m > 1)
	{
		int P = (2*dx) - dy;
		int x = x1;
		int y = y1;
		if (dy < 0){
			x = x2;
			y = y2;
			y2 = y1;
		}
		display(x, y);
		while (y < y2){
			if (P >= 0)
			{
				x = x+1;
				y = y+1;
				P = P + (2*dx) - (2*dy) * (x+1 - x);
			}
			else
			{
				y = y+1;
				x = x;
				P = P + (2*dx) - (2*dy) * (x - x);
			}
			display(x, y);
		}
	}
	else if (m == 1)
	{
		int x = x1;
		int y = y1;
		display(x, y);
		while (x < x2)
		{
			x = x+1;
			y = y+1;
			display(x, y);
		}
	}
	glFlush();
}

void DashLine(int x1, int y1, int x2, int y2){
	float dx = x2 - x1;
	float dy = y2 - y1;

	int steps;
	
	if(abs(dx) >= abs(dy)){
		steps = abs(dx);	
	}
	else{
		steps = abs(dy);
	}
	
	float Xin = dx / (float) steps;
	float Yin = dy / (float) steps;
	float x = x1;
	float y = y1;
	
	for(int i=0; i<=steps; i++){
		if(i % 8 > 4){
			displaydashed(x, y);
		}
		x = x + Xin;
		y = y + Yin;
	}
	glFlush();
}

void SolidLine(int x1, int y1, int x2, int y2){
	float dx = x2 - x1;
	float dy = y2 - y1;

	int steps;
	
	if(abs(dx) >= abs(dy)){
		steps = abs(dx);	
	}
	else{
		steps = abs(dy);
	}
	
	float Xin = dx / (float) steps;
	float Yin = dy / (float) steps;
	float x = x1;
	float y = y1;
	
	for(int i=0; i<=steps; i++){
		displaydashed(x, y);
		x = x + Xin;
		y = y + Yin;
	}
	glFlush();
}

void mouse(int button, int state, int x, int y)
{
    static int x1, y1, pt = 0;
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
    {
        if (pt == 0)
        {
            x1 = x;
            y1 = y;
            pt = pt + 1;
        }
        else
        {
            if (ch == 1)
            {
                SimpleLine(x1, y1, x, y);
            }
            else if (ch == 2)
            {
            	DottedLine(x1, y1, x, y);
            }
            else if (ch == 3)
            {
                DashLine(x1, y1, x, y);
            }
            else if(ch == 4) 
			{
                SolidLine(x1, y1, x, y);
            }
            x1 = x;
            y1 = y;
        }
    }
    else if (button == GLUT_RIGHT_BUTTON && state == GLUT_DOWN){
    	pt = 0;	
	}
    glFlush();
}

void keyboard(unsigned char key, int x, int y)
{
    switch (key)
    {
		case 's':
		{
			ch = 1;
			cout << "Simple Line is opted" << endl;
			glutMouseFunc(mouse);
			break;
		}
		case 'd':
		{
			ch = 2;
			cout << "Dotted Line is opted" << endl;
			glutMouseFunc(mouse);
			break;
		}
		case 'D':
		{
			ch = 3;
			cout << "Dashed Line is opted" << endl;
			glutMouseFunc(mouse);
			break;
		}
		case 'S':
		{
			ch = 4;
			cout << "Solid Line is opted" << endl;
			glutMouseFunc(mouse);
			break;
		}
    }
    glutPostRedisplay();
}

void initialize()
{
    glClearColor(1.0, 1.0, 1.0, 1.0);
    glClear(GL_COLOR_BUFFER_BIT);
    gluOrtho2D(0, 600, 600, 0);
}

void initialaxis(){
    glColor3f(0,0,0);
    glLineWidth(2);
    glBegin(GL_LINES);
    glVertex2i(300, 0);
    glVertex2i(300, 600);
    glVertex2i(0, 300);
    glVertex2i(600, 300);
    glEnd();
	glFlush();
	glutKeyboardFunc(keyboard);
}

int main(int argc, char **argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE);
    glutInitWindowSize(600, 600);
    glutInitWindowPosition(800, 100);
    glutCreateWindow("Bresenham Algorithm");
    initialize();
    cout << "Choose your Line type: " << endl;
    cout << "--------------------------------------------" << endl;
    cout << "s => simple" << endl;
    cout << "d => dotted" << endl;
    cout << "D => Dashed" << endl;
    cout << "S => Solid" << endl;
    cout << "--------------------------------------------" << endl;
    glutDisplayFunc(initialaxis);
    glutMainLoop();
    return 0;
}

